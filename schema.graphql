# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreatePostInput {
  authorId: Int!
  content: String!
  title: String!
}

type CreatePostResponse {
  data: PostModel
  errors: [FieldError!]
}

input CreateUsersInput {
  email: String!
  lastname: String!
  name: String!
  password: String!
  rol: Role!
}

type CreateUsersResponse {
  data: UserModel
  errors: [FieldError!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  field: String!
  message: String!
}

type GetAllPostData {
  author: UserModel!
  authorId: Int!
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type GetAllPostResponse {
  data: [GetAllPostData!]!
  page: Int!
  pageSize: Int!
  totalItems: Int!
}

type GetAllUsersData {
  createdAt: DateTime!
  email: String!
  fullname: String!
  id: ID!
  lastname: String!
  name: String!
  posts: [PostModel!]!
  rol: Role!
  updatedAt: DateTime!
}

type GetAllUsersResponse {
  data: [GetAllUsersData!]!
  page: Int!
  pageSize: Int!
  totalItems: Int!
}

type LoginUserData {
  token: String!
  user: UserModel!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResponse {
  data: LoginUserData
  errors: [FieldError!]
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostResponse
  createUser(input: CreateUsersInput!): CreateUsersResponse!
  deletePost(id: Int!): Boolean!
  deleteUser(id: Float!): Boolean!
  loginUser(input: LoginUserInput!): LoginUserResponse!
  refreshTokenUser: RefreshTokenUserResponse!
  updatePost(input: UpdatePostInput!): UpdatePostResponse
  updateUser(input: UpdateUsersInput!): UpdateUsersResponse!
}

type PostModel {
  authorId: Int!
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type Query {
  getAllPost(page: Int = 1, pageSize: Int = 10): GetAllPostResponse!
  getAllUsers(page: Int = 1, pageSize: Int = 10): GetAllUsersResponse!
  getPostById(id: Int!): PostModel
  getUserById(id: Int!): UserModel
}

type RefreshTokenUserData {
  token: String!
  user: UserModel!
}

type RefreshTokenUserResponse {
  data: RefreshTokenUserData
  errors: [FieldError!]
}

enum Role {
  ADMIN
  USER
}

input UpdatePostInput {
  authorId: Int!
  content: String!
  id: Int!
  title: String!
}

type UpdatePostResponse {
  data: PostModel
  errors: [FieldError!]
}

input UpdateUsersInput {
  email: String!
  id: Int!
  lastname: String!
  name: String!
  rol: Role!
}

type UpdateUsersResponse {
  data: UserModel
  errors: [FieldError!]
}

type UserModel {
  createdAt: DateTime!
  email: String!
  fullname: String!
  id: ID!
  lastname: String!
  name: String!
  rol: Role!
  updatedAt: DateTime!
}
